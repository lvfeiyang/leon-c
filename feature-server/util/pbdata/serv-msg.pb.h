// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serv-msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serv_2dmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serv_2dmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serv_2dmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serv_2dmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serv_2dmsg_2eproto;
namespace ServMsg {
class PullReq;
class PullReqDefaultTypeInternal;
extern PullReqDefaultTypeInternal _PullReq_default_instance_;
class PullRsp;
class PullRspDefaultTypeInternal;
extern PullRspDefaultTypeInternal _PullRsp_default_instance_;
class PushReq;
class PushReqDefaultTypeInternal;
extern PushReqDefaultTypeInternal _PushReq_default_instance_;
class PushRsp;
class PushRspDefaultTypeInternal;
extern PushRspDefaultTypeInternal _PushRsp_default_instance_;
class oneInfo;
class oneInfoDefaultTypeInternal;
extern oneInfoDefaultTypeInternal _oneInfo_default_instance_;
}  // namespace ServMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::ServMsg::PullReq* Arena::CreateMaybeMessage<::ServMsg::PullReq>(Arena*);
template<> ::ServMsg::PullRsp* Arena::CreateMaybeMessage<::ServMsg::PullRsp>(Arena*);
template<> ::ServMsg::PushReq* Arena::CreateMaybeMessage<::ServMsg::PushReq>(Arena*);
template<> ::ServMsg::PushRsp* Arena::CreateMaybeMessage<::ServMsg::PushRsp>(Arena*);
template<> ::ServMsg::oneInfo* Arena::CreateMaybeMessage<::ServMsg::oneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ServMsg {

// ===================================================================

class oneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServMsg.oneInfo) */ {
 public:
  inline oneInfo() : oneInfo(nullptr) {}
  virtual ~oneInfo();

  oneInfo(const oneInfo& from);
  oneInfo(oneInfo&& from) noexcept
    : oneInfo() {
    *this = ::std::move(from);
  }

  inline oneInfo& operator=(const oneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline oneInfo& operator=(oneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oneInfo& default_instance();

  static inline const oneInfo* internal_default_instance() {
    return reinterpret_cast<const oneInfo*>(
               &_oneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(oneInfo& a, oneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(oneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oneInfo* New() const final {
    return CreateMaybeMessage<oneInfo>(nullptr);
  }

  oneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oneInfo& from);
  void MergeFrom(const oneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServMsg.oneInfo";
  }
  protected:
  explicit oneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serv_2dmsg_2eproto);
    return ::descriptor_table_serv_2dmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ServMsg.oneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serv_2dmsg_2eproto;
};
// -------------------------------------------------------------------

class PushReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServMsg.PushReq) */ {
 public:
  inline PushReq() : PushReq(nullptr) {}
  virtual ~PushReq();

  PushReq(const PushReq& from);
  PushReq(PushReq&& from) noexcept
    : PushReq() {
    *this = ::std::move(from);
  }

  inline PushReq& operator=(const PushReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushReq& operator=(PushReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushReq& default_instance();

  static inline const PushReq* internal_default_instance() {
    return reinterpret_cast<const PushReq*>(
               &_PushReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PushReq& a, PushReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PushReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushReq* New() const final {
    return CreateMaybeMessage<PushReq>(nullptr);
  }

  PushReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushReq& from);
  void MergeFrom(const PushReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServMsg.PushReq";
  }
  protected:
  explicit PushReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serv_2dmsg_2eproto);
    return ::descriptor_table_serv_2dmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .ServMsg.oneInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::ServMsg::oneInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServMsg::oneInfo >*
      mutable_infos();
  private:
  const ::ServMsg::oneInfo& _internal_infos(int index) const;
  ::ServMsg::oneInfo* _internal_add_infos();
  public:
  const ::ServMsg::oneInfo& infos(int index) const;
  ::ServMsg::oneInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServMsg::oneInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:ServMsg.PushReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServMsg::oneInfo > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serv_2dmsg_2eproto;
};
// -------------------------------------------------------------------

class PushRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServMsg.PushRsp) */ {
 public:
  inline PushRsp() : PushRsp(nullptr) {}
  virtual ~PushRsp();

  PushRsp(const PushRsp& from);
  PushRsp(PushRsp&& from) noexcept
    : PushRsp() {
    *this = ::std::move(from);
  }

  inline PushRsp& operator=(const PushRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushRsp& operator=(PushRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushRsp& default_instance();

  static inline const PushRsp* internal_default_instance() {
    return reinterpret_cast<const PushRsp*>(
               &_PushRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PushRsp& a, PushRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PushRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushRsp* New() const final {
    return CreateMaybeMessage<PushRsp>(nullptr);
  }

  PushRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushRsp& from);
  void MergeFrom(const PushRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServMsg.PushRsp";
  }
  protected:
  explicit PushRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serv_2dmsg_2eproto);
    return ::descriptor_table_serv_2dmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrDescFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string errDesc = 2;
  void clear_errdesc();
  const std::string& errdesc() const;
  void set_errdesc(const std::string& value);
  void set_errdesc(std::string&& value);
  void set_errdesc(const char* value);
  void set_errdesc(const char* value, size_t size);
  std::string* mutable_errdesc();
  std::string* release_errdesc();
  void set_allocated_errdesc(std::string* errdesc);
  private:
  const std::string& _internal_errdesc() const;
  void _internal_set_errdesc(const std::string& value);
  std::string* _internal_mutable_errdesc();
  public:

  // int32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServMsg.PushRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errdesc_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serv_2dmsg_2eproto;
};
// -------------------------------------------------------------------

class PullReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServMsg.PullReq) */ {
 public:
  inline PullReq() : PullReq(nullptr) {}
  virtual ~PullReq();

  PullReq(const PullReq& from);
  PullReq(PullReq&& from) noexcept
    : PullReq() {
    *this = ::std::move(from);
  }

  inline PullReq& operator=(const PullReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullReq& operator=(PullReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullReq& default_instance();

  static inline const PullReq* internal_default_instance() {
    return reinterpret_cast<const PullReq*>(
               &_PullReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PullReq& a, PullReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PullReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullReq* New() const final {
    return CreateMaybeMessage<PullReq>(nullptr);
  }

  PullReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullReq& from);
  void MergeFrom(const PullReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServMsg.PullReq";
  }
  protected:
  explicit PullReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serv_2dmsg_2eproto);
    return ::descriptor_table_serv_2dmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kFieldFieldNumber = 2,
  };
  // repeated uint64 keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_keys() const;
  void _internal_add_keys(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 keys(int index) const;
  void set_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_keys(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_keys();

  // repeated uint32 field = 2;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_field() const;
  void _internal_add_field(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_field();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 field(int index) const;
  void set_field(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_field(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_field();

  // @@protoc_insertion_point(class_scope:ServMsg.PullReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > keys_;
  mutable std::atomic<int> _keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > field_;
  mutable std::atomic<int> _field_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serv_2dmsg_2eproto;
};
// -------------------------------------------------------------------

class PullRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServMsg.PullRsp) */ {
 public:
  inline PullRsp() : PullRsp(nullptr) {}
  virtual ~PullRsp();

  PullRsp(const PullRsp& from);
  PullRsp(PullRsp&& from) noexcept
    : PullRsp() {
    *this = ::std::move(from);
  }

  inline PullRsp& operator=(const PullRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRsp& operator=(PullRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullRsp& default_instance();

  static inline const PullRsp* internal_default_instance() {
    return reinterpret_cast<const PullRsp*>(
               &_PullRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PullRsp& a, PullRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullRsp* New() const final {
    return CreateMaybeMessage<PullRsp>(nullptr);
  }

  PullRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullRsp& from);
  void MergeFrom(const PullRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServMsg.PullRsp";
  }
  protected:
  explicit PullRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serv_2dmsg_2eproto);
    return ::descriptor_table_serv_2dmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kErrDescFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // repeated bytes data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // string errDesc = 2;
  void clear_errdesc();
  const std::string& errdesc() const;
  void set_errdesc(const std::string& value);
  void set_errdesc(std::string&& value);
  void set_errdesc(const char* value);
  void set_errdesc(const char* value, size_t size);
  std::string* mutable_errdesc();
  std::string* release_errdesc();
  void set_allocated_errdesc(std::string* errdesc);
  private:
  const std::string& _internal_errdesc() const;
  void _internal_set_errdesc(const std::string& value);
  std::string* _internal_mutable_errdesc();
  public:

  // int32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServMsg.PullRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errdesc_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serv_2dmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// oneInfo

// uint64 key = 1;
inline void oneInfo::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 oneInfo::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 oneInfo::key() const {
  // @@protoc_insertion_point(field_get:ServMsg.oneInfo.key)
  return _internal_key();
}
inline void oneInfo::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_ = value;
}
inline void oneInfo::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ServMsg.oneInfo.key)
}

// bytes data = 2;
inline void oneInfo::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& oneInfo::data() const {
  // @@protoc_insertion_point(field_get:ServMsg.oneInfo.data)
  return _internal_data();
}
inline void oneInfo::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ServMsg.oneInfo.data)
}
inline std::string* oneInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ServMsg.oneInfo.data)
  return _internal_mutable_data();
}
inline const std::string& oneInfo::_internal_data() const {
  return data_.Get();
}
inline void oneInfo::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void oneInfo::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServMsg.oneInfo.data)
}
inline void oneInfo::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ServMsg.oneInfo.data)
}
inline void oneInfo::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServMsg.oneInfo.data)
}
inline std::string* oneInfo::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* oneInfo::release_data() {
  // @@protoc_insertion_point(field_release:ServMsg.oneInfo.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void oneInfo::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServMsg.oneInfo.data)
}

// -------------------------------------------------------------------

// PushReq

// repeated .ServMsg.oneInfo infos = 1;
inline int PushReq::_internal_infos_size() const {
  return infos_.size();
}
inline int PushReq::infos_size() const {
  return _internal_infos_size();
}
inline void PushReq::clear_infos() {
  infos_.Clear();
}
inline ::ServMsg::oneInfo* PushReq::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:ServMsg.PushReq.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServMsg::oneInfo >*
PushReq::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:ServMsg.PushReq.infos)
  return &infos_;
}
inline const ::ServMsg::oneInfo& PushReq::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::ServMsg::oneInfo& PushReq::infos(int index) const {
  // @@protoc_insertion_point(field_get:ServMsg.PushReq.infos)
  return _internal_infos(index);
}
inline ::ServMsg::oneInfo* PushReq::_internal_add_infos() {
  return infos_.Add();
}
inline ::ServMsg::oneInfo* PushReq::add_infos() {
  // @@protoc_insertion_point(field_add:ServMsg.PushReq.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServMsg::oneInfo >&
PushReq::infos() const {
  // @@protoc_insertion_point(field_list:ServMsg.PushReq.infos)
  return infos_;
}

// -------------------------------------------------------------------

// PushRsp

// int32 errCode = 1;
inline void PushRsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushRsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushRsp::errcode() const {
  // @@protoc_insertion_point(field_get:ServMsg.PushRsp.errCode)
  return _internal_errcode();
}
inline void PushRsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void PushRsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:ServMsg.PushRsp.errCode)
}

// string errDesc = 2;
inline void PushRsp::clear_errdesc() {
  errdesc_.ClearToEmpty();
}
inline const std::string& PushRsp::errdesc() const {
  // @@protoc_insertion_point(field_get:ServMsg.PushRsp.errDesc)
  return _internal_errdesc();
}
inline void PushRsp::set_errdesc(const std::string& value) {
  _internal_set_errdesc(value);
  // @@protoc_insertion_point(field_set:ServMsg.PushRsp.errDesc)
}
inline std::string* PushRsp::mutable_errdesc() {
  // @@protoc_insertion_point(field_mutable:ServMsg.PushRsp.errDesc)
  return _internal_mutable_errdesc();
}
inline const std::string& PushRsp::_internal_errdesc() const {
  return errdesc_.Get();
}
inline void PushRsp::_internal_set_errdesc(const std::string& value) {
  
  errdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushRsp::set_errdesc(std::string&& value) {
  
  errdesc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServMsg.PushRsp.errDesc)
}
inline void PushRsp::set_errdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ServMsg.PushRsp.errDesc)
}
inline void PushRsp::set_errdesc(const char* value,
    size_t size) {
  
  errdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServMsg.PushRsp.errDesc)
}
inline std::string* PushRsp::_internal_mutable_errdesc() {
  
  return errdesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushRsp::release_errdesc() {
  // @@protoc_insertion_point(field_release:ServMsg.PushRsp.errDesc)
  return errdesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushRsp::set_allocated_errdesc(std::string* errdesc) {
  if (errdesc != nullptr) {
    
  } else {
    
  }
  errdesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errdesc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServMsg.PushRsp.errDesc)
}

// -------------------------------------------------------------------

// PullReq

// repeated uint64 keys = 1;
inline int PullReq::_internal_keys_size() const {
  return keys_.size();
}
inline int PullReq::keys_size() const {
  return _internal_keys_size();
}
inline void PullReq::clear_keys() {
  keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullReq::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullReq::keys(int index) const {
  // @@protoc_insertion_point(field_get:ServMsg.PullReq.keys)
  return _internal_keys(index);
}
inline void PullReq::set_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:ServMsg.PullReq.keys)
}
inline void PullReq::_internal_add_keys(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  keys_.Add(value);
}
inline void PullReq::add_keys(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_keys(value);
  // @@protoc_insertion_point(field_add:ServMsg.PullReq.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PullReq::_internal_keys() const {
  return keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PullReq::keys() const {
  // @@protoc_insertion_point(field_list:ServMsg.PullReq.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PullReq::_internal_mutable_keys() {
  return &keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PullReq::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ServMsg.PullReq.keys)
  return _internal_mutable_keys();
}

// repeated uint32 field = 2;
inline int PullReq::_internal_field_size() const {
  return field_.size();
}
inline int PullReq::field_size() const {
  return _internal_field_size();
}
inline void PullReq::clear_field() {
  field_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PullReq::_internal_field(int index) const {
  return field_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PullReq::field(int index) const {
  // @@protoc_insertion_point(field_get:ServMsg.PullReq.field)
  return _internal_field(index);
}
inline void PullReq::set_field(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  field_.Set(index, value);
  // @@protoc_insertion_point(field_set:ServMsg.PullReq.field)
}
inline void PullReq::_internal_add_field(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  field_.Add(value);
}
inline void PullReq::add_field(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_field(value);
  // @@protoc_insertion_point(field_add:ServMsg.PullReq.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PullReq::_internal_field() const {
  return field_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PullReq::field() const {
  // @@protoc_insertion_point(field_list:ServMsg.PullReq.field)
  return _internal_field();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PullReq::_internal_mutable_field() {
  return &field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PullReq::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:ServMsg.PullReq.field)
  return _internal_mutable_field();
}

// -------------------------------------------------------------------

// PullRsp

// int32 errCode = 1;
inline void PullRsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PullRsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PullRsp::errcode() const {
  // @@protoc_insertion_point(field_get:ServMsg.PullRsp.errCode)
  return _internal_errcode();
}
inline void PullRsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void PullRsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:ServMsg.PullRsp.errCode)
}

// string errDesc = 2;
inline void PullRsp::clear_errdesc() {
  errdesc_.ClearToEmpty();
}
inline const std::string& PullRsp::errdesc() const {
  // @@protoc_insertion_point(field_get:ServMsg.PullRsp.errDesc)
  return _internal_errdesc();
}
inline void PullRsp::set_errdesc(const std::string& value) {
  _internal_set_errdesc(value);
  // @@protoc_insertion_point(field_set:ServMsg.PullRsp.errDesc)
}
inline std::string* PullRsp::mutable_errdesc() {
  // @@protoc_insertion_point(field_mutable:ServMsg.PullRsp.errDesc)
  return _internal_mutable_errdesc();
}
inline const std::string& PullRsp::_internal_errdesc() const {
  return errdesc_.Get();
}
inline void PullRsp::_internal_set_errdesc(const std::string& value) {
  
  errdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullRsp::set_errdesc(std::string&& value) {
  
  errdesc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServMsg.PullRsp.errDesc)
}
inline void PullRsp::set_errdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ServMsg.PullRsp.errDesc)
}
inline void PullRsp::set_errdesc(const char* value,
    size_t size) {
  
  errdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServMsg.PullRsp.errDesc)
}
inline std::string* PullRsp::_internal_mutable_errdesc() {
  
  return errdesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullRsp::release_errdesc() {
  // @@protoc_insertion_point(field_release:ServMsg.PullRsp.errDesc)
  return errdesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PullRsp::set_allocated_errdesc(std::string* errdesc) {
  if (errdesc != nullptr) {
    
  } else {
    
  }
  errdesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errdesc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServMsg.PullRsp.errDesc)
}

// repeated bytes data = 3;
inline int PullRsp::_internal_data_size() const {
  return data_.size();
}
inline int PullRsp::data_size() const {
  return _internal_data_size();
}
inline void PullRsp::clear_data() {
  data_.Clear();
}
inline std::string* PullRsp::add_data() {
  // @@protoc_insertion_point(field_add_mutable:ServMsg.PullRsp.data)
  return _internal_add_data();
}
inline const std::string& PullRsp::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& PullRsp::data(int index) const {
  // @@protoc_insertion_point(field_get:ServMsg.PullRsp.data)
  return _internal_data(index);
}
inline std::string* PullRsp::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ServMsg.PullRsp.data)
  return data_.Mutable(index);
}
inline void PullRsp::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ServMsg.PullRsp.data)
  data_.Mutable(index)->assign(value);
}
inline void PullRsp::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ServMsg.PullRsp.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void PullRsp::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServMsg.PullRsp.data)
}
inline void PullRsp::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServMsg.PullRsp.data)
}
inline std::string* PullRsp::_internal_add_data() {
  return data_.Add();
}
inline void PullRsp::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServMsg.PullRsp.data)
}
inline void PullRsp::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServMsg.PullRsp.data)
}
inline void PullRsp::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServMsg.PullRsp.data)
}
inline void PullRsp::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServMsg.PullRsp.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PullRsp::data() const {
  // @@protoc_insertion_point(field_list:ServMsg.PullRsp.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PullRsp::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ServMsg.PullRsp.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serv_2dmsg_2eproto
